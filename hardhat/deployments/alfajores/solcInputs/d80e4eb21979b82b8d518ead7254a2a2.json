{
  "language": "Solidity",
  "sources": {
    "contracts/multiLoanErc20.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract CentralizedLoan {\n    enum LoanState {Offered, Taken, Repayed, Defaulted}\n\n    struct Loans {\n        bool isCustomer;\n        address borrower;\n        address ercAddress;\n        uint256 loanAmount;\n        uint256 interestAmount;\n        uint256 repayByTimestamp;\n        LoanState state;\n    }\n\n    mapping(address => Loans) public loans;\n    address[] public customers;\n\n    event LoanOffered(\n        address _borrower,\n        uint256 _loanAmount,\n        uint256 _interestAmount,\n        uint256 _repayByTimestamp,\n        address _ercAddress\n    );\n\n    event LoanTaken(\n        address _borrower,\n        uint256 _loanAmount,\n        uint256 _interestAmount,\n        uint256 _repayByTimestamp,\n        address _ercAddress\n    );\n\n    event LoanRepaid(\n        address _borrower,\n        uint256 _loanAmount,\n        uint256 _interestAmount,\n        uint256 _repayByTimestamp,\n        address _ercAddress\n    );\n\n    event LoanDefaulted(\n        address _borrower,\n        uint256 _loanAmount,\n        uint256 _interestAmount,\n        uint256 _repayByTimestamp,\n        address _ercAddress\n    );\n\n    modifier onlyInState(LoanState expectedState) {\n        require(loans[msg.sender].state == expectedState, \"Not allowed in this state\");\n        _;\n    }\n\n    constructor() {\n        lender = payable(msg.sender);\n    }\n\n    address payable public lender;\n    \n    function offerLoan(\n        uint256 _loanAmount, \n        uint256 _interestAmount, \n        uint256 _repayByTimestamp, \n        address _borrower, \n        address _ercAddress\n    ) \n    public\n    payable\n    {\n        require(!loans[_borrower].isCustomer, \"You already have been offered a loan.\");\n        require(\n            IERC20(loans[_borrower].ercAddress).allowance(msg.sender, address(this)) >= loans[_borrower].loanAmount, \n            \"Insuficient Allowance\"\n        );\n        require(\n            IERC20(loans[_borrower].ercAddress).transferFrom(msg.sender,address(this), loans[_borrower].loanAmount), \n            \"Loan Funding Failed\"\n        );\n        customers.push(_borrower);\n        loans[_borrower].isCustomer = true;\n        loans[_borrower].loanAmount = _loanAmount;\n        loans[_borrower].interestAmount = _interestAmount;\n        loans[_borrower].repayByTimestamp = _repayByTimestamp;\n        loans[_borrower].ercAddress = _ercAddress;\n        loans[_borrower].state = LoanState.Offered;\n        emit LoanOffered(\n            _borrower,\n            _loanAmount,\n            _interestAmount,\n            _repayByTimestamp,\n            _ercAddress\n        );\n    }\n\n    function takeLoanAndAcceptTerms()\n    public\n    onlyInState(LoanState.Offered)\n    {\n        require(loans[msg.sender].isCustomer, \"No loan has been offered to you.\");\n        require(loans[msg.sender].state == LoanState.Offered, \"You have already taken your loan.\");\n        loans[msg.sender].state = LoanState.Taken;\n        //require borrower to recieve the funds\n        require(\n            // transfer the specified token from this contract to msg.sender\n            IERC20(loans[msg.sender].ercAddress).transfer(msg.sender, loans[msg.sender].loanAmount),\n            \"Lending ERC20 Token to borrower failed.\"\n        );\n        emit LoanTaken(\n            msg.sender,\n            loans[msg.sender].loanAmount,\n            loans[msg.sender].interestAmount,\n            loans[msg.sender].repayByTimestamp,\n            loans[msg.sender].ercAddress\n        );\n    }\n\n    function repay() \n    public\n    payable\n    onlyInState(LoanState.Taken)\n    {\n        require(loans[msg.sender].isCustomer, \"No loan has been offered to you.\");\n        require(loans[msg.sender].state == LoanState.Taken, \"There is no loan open with your address.\");\n        require(\n            IERC20(loans[msg.sender].ercAddress).allowance(msg.sender, address(this)) >= loans[msg.sender].loanAmount + loans[msg.sender].interestAmount, \n            \"Insuficient Allowance\"\n        );\n        require(\n            IERC20(loans[msg.sender].ercAddress).transferFrom(msg.sender, \n                address(lender), \n                loans[msg.sender].loanAmount + loans[msg.sender].interestAmount),\n            \"Payment of borrower to lender failed.\"\n        );\n        loans[msg.sender].state = LoanState.Repayed;\n        loans[msg.sender].isCustomer = false;\n        emit LoanRepaid(\n            msg.sender,\n            loans[msg.sender].loanAmount,\n            loans[msg.sender].interestAmount,\n            loans[msg.sender].repayByTimestamp,\n            loans[msg.sender].ercAddress\n        );\n    }\n\n    function liquidate(address _borrower) public onlyInState(LoanState.Taken) {\n        require(block.timestamp > loans[_borrower].repayByTimestamp, \"Cannot liquidate before the loan is due\");\n        loans[_borrower].state = LoanState.Defaulted;\n        emit LoanDefaulted(\n            _borrower,\n            loans[_borrower].loanAmount,\n            loans[_borrower].interestAmount,\n            loans[_borrower].repayByTimestamp,\n            loans[_borrower].ercAddress\n        );\n    }\n}"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}